#!/bin/bash

# FIAP Vehicles - Script de Setup Autom√°tico
# Executa toda a configura√ß√£o necess√°ria automaticamente

set -e  # Para em caso de erro

echo "üöÄ FIAP Vehicles - Setup Autom√°tico"
echo "====================================="

# Verificar pr√©-requisitos
echo "üìã Verificando pr√©-requisitos..."

if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Por favor, instale o Docker primeiro."
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl n√£o encontrado. Por favor, instale o Kubernetes primeiro."
    exit 1
fi

echo "‚úÖ Pr√©-requisitos atendidos"

# Configurar ambiente
echo "üîß Configurando ambiente..."
if [ ! -f .env ]; then
    cp .env.example .env
    echo "‚úÖ Arquivo .env criado"
else
    echo "‚úÖ Arquivo .env j√° existe"
fi

# Build da aplica√ß√£o
echo "üê≥ Fazendo build da aplica√ß√£o..."
docker compose build
echo "‚úÖ Build conclu√≠do"

# Executar localmente
echo "üèÉ Executando aplica√ß√£o localmente..."
docker compose up -d
echo "‚úÖ Aplica√ß√£o rodando localmente"

# Aguardar aplica√ß√£o subir
echo "‚è≥ Aguardando aplica√ß√£o inicializar..."
sleep 15

# Testar aplica√ß√£o local
echo "üß™ Testando aplica√ß√£o local..."
if curl -sf http://localhost:8000/health > /dev/null; then
    echo "‚úÖ Aplica√ß√£o local funcionando"
else
    echo "‚ùå Erro na aplica√ß√£o local"
    docker compose logs api
    exit 1
fi

# Importar imagem para k3s (se dispon√≠vel)
if command -v k3s &> /dev/null; then
    echo "üì¶ Importando imagem para k3s..."
    docker save fiap_sub_2-api:latest | sudo k3s ctr images import -
    echo "‚úÖ Imagem importada para k3s"
    
    # Deploy no Kubernetes
    echo "‚ò∏Ô∏è Fazendo deploy no Kubernetes..."
    kubectl apply -f k8s/namespace.yaml
    kubectl apply -f k8s/mysql-secret.yaml
    kubectl apply -f k8s/mysql-statefulset.yaml
    kubectl apply -f k8s/api.yaml
    kubectl apply -f k8s/api-nodeport.yaml
    kubectl apply -f k8s/ingress.yaml
    echo "‚úÖ Deploy no Kubernetes conclu√≠do"
    
    # Aguardar pods subirem
    echo "‚è≥ Aguardando pods iniciarem..."
    kubectl wait --for=condition=ready pod -l app=api -n fiap-vehicles --timeout=300s
    
    # Obter IP do n√≥
    NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
    
    echo "üß™ Testando aplica√ß√£o no Kubernetes..."
    if curl -sf http://$NODE_IP:30080/health > /dev/null; then
        echo "‚úÖ Aplica√ß√£o no Kubernetes funcionando"
    else
        echo "‚ö†Ô∏è  Aplica√ß√£o no Kubernetes pode n√£o estar acess√≠vel externamente"
    fi
    
    echo ""
    echo "üéâ SETUP CONCLU√çDO COM SUCESSO!"
    echo "==============================="
    echo ""
    echo "üì° URLs de Acesso:"
    echo "   Local: http://localhost:8000"
    echo "   Kubernetes: http://$NODE_IP:30080"
    echo "   Documenta√ß√£o: /docs (em qualquer URL acima)"
    echo ""
    echo "üîç Comandos √∫teis:"
    echo "   docker compose ps                    # Status local"
    echo "   kubectl get pods -n fiap-vehicles    # Status Kubernetes"
    echo "   curl http://localhost:8000/health    # Teste local"
    echo "   curl http://$NODE_IP:30080/health    # Teste Kubernetes"
    echo ""
else
    echo "‚ö†Ô∏è  k3s n√£o encontrado - pulando deploy Kubernetes"
    echo ""
    echo "üéâ SETUP LOCAL CONCLU√çDO!"
    echo "========================="
    echo ""
    echo "üì° URLs de Acesso:"
    echo "   Local: http://localhost:8000"
    echo "   Documenta√ß√£o: http://localhost:8000/docs"
    echo ""
fi

echo "üìö Para mais informa√ß√µes, consulte:"
echo "   README.md - Documenta√ß√£o completa"
echo "   ROTEIRO_IMPLEMENTACAO.md - Guia passo a passo"
echo "   EVIDENCIAS_ENTREGAVEIS.md - Comprova√ß√£o dos crit√©rios"
